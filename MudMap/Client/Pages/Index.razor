@page "/"
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using System.Diagnostics
@inject IJSRuntime jsRuntime

<PageTitle>Mud Map</PageTitle>

<h1>Mud Map</h1>

<button @onclick="@OnClick">RefreshLocation</button>
<h2>Here's a skewed town map</h2>
<SkiaSharp.Views.Blazor.SKCanvasView @ref="TheCanvas" EnableRenderLoop="true" OnPaintSurface="@OnPaintSurface" style="width: 500px; height: 500px;"></SkiaSharp.Views.Blazor.SKCanvasView>
<h2>Here's the real world around you</h2>
<Map></Map>


@code
{
    WindowNavigatorGeolocation geolocationWrapper;
    SKCanvasView TheCanvas;
    List<Place> Places = new List<Place>
    {
        new Place {Point = new SKPoint(20, 300 ),Label = "My House", Location = new GeolocationCoordinates{Latitude = -37.781740, Longitude = 144.922566 } },
        new Place {Point = new SKPoint(450, 450), Label = "Moe", Location = new GeolocationCoordinates{Latitude = -38.21337, Longitude = 146.27487 } },
        new Place {Point = new SKPoint(200, 10 ),Label = "Geohash", Location = new GeolocationCoordinates{Latitude = -37.781740, Longitude = 144.922566 } },
        new Place {Point = new SKPoint(180, 280), Label = "Pub", Location = new GeolocationCoordinates{Latitude = -37.782820, Longitude = 144.983997 } },
        new Place {Point = new SKPoint(100, 350), Label = "Spencer Street", Location = new GeolocationCoordinates{Latitude = -37.81801, Longitude = 144.95258 } },
        new Place {Point = new SKPoint(100, 270), Label = "Cafe", Location = new GeolocationCoordinates{Latitude = -37.761554, Longitude = 144.960775 } },
    };

    Place CurrentLocation { get; set; }

    List<Line> Lines = new List<Line>
    {
        new Line{ Start = new SKPoint(100,350), End =  new SKPoint(450, 450), Label = "Train Line" },
        new Line{ Start = new SKPoint(200,10), End =  new SKPoint(100, 270), Label = "Bike Path" },
        new Line{ Start = new SKPoint(180,280), End =  new SKPoint(100, 270),  },
        new Line{ Start = new SKPoint(20,300), End =  new SKPoint(100, 270),  },
        new Line{ Start = new SKPoint(180,280), End =  new SKPoint(100, 350),  },
    };

    SKPaint Dot = new SKPaint
    {
        Color = SKColors.Aqua,
        StrokeWidth = 7,
    };

    SKPaint Me = new SKPaint
    {
        Color = SKColors.Blue,
        StrokeWidth = 12,
    };

    SKPaint LinePaint = new SKPaint
    {
        Color = SKColors.MediumVioletRed,
        StrokeWidth = 3,
    };

    SKPaint Label = new SKPaint
    {
        Color = SKColors.Black,
        StrokeWidth = 10,
        TextSize = 15,
    };

    GeolocationCoordinates Location;

    void OnPaintSurface(SKPaintSurfaceEventArgs e)
    {
        var canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.Beige);
        foreach (var place in Places)
        {
            canvas.DrawPoint(place.Point, Dot);
            canvas.DrawText(place.Label, place.Point, Label);
        }
        foreach(var line in Lines)
        {
            canvas.DrawLine(line.Start, line.End, LinePaint);
            canvas.DrawText(line.Label, line.MidPoint, Label);
        }

        if(CurrentLocation != null)
        {
            canvas.DrawPoint(CurrentLocation.Point, Me);

        }


        canvas.DrawText(DateTime.Now.ToString("hh:mm:ss.fff"), 5, 10, Label);
        canvas.DrawText($"{Location?.Latitude}, {Location?.Longitude}", 5, 30, Label);
        canvas.DrawText($"{CurrentLocation?.Point.X}, {CurrentLocation?.Point.Y}", 5, 50, Label);



    }

    protected override async Task OnInitializedAsync()
    {
        await  base.OnInitializedAsync();


    }
    bool IsBusy;

    public async Task OnClick(MouseEventArgs e)
    {
        await GetLocation();
    }

    public async Task GetLocation()
    {
        if(geolocationWrapper == null)
        {
            Debug.WriteLine($"Getting wrapper");
            var window = await jsRuntime.Window();
            var navigator = await window.Navigator();
            geolocationWrapper = navigator.Geolocation;
            await Task.Delay(1000);
        }
        if(geolocationWrapper == null)
        {
            Debug.WriteLine($"wrapper is null");
            return;
        }

        var pos = await geolocationWrapper.GetCurrentPosition();
        if(pos == null)
        {
            Debug.WriteLine($"pos is null");
            return;
        }

        //fake location
        //var loc = new GeolocationCoordinates { Latitude =-38.0403, Longitude = 145.534545 };
        var loc = pos.Location.Coords;

        //Old, order by ditance from me
        //var orderedByLatDistanceFromMe = Places.OrderBy(place => Math.Abs(place.Location.Latitude - Location.Latitude));
        //var orderedByLonDistanceFromMe = Places.OrderBy(place => Math.Abs(place.Location.Longitude - Location.Longitude));


        //var closestLat = orderedByLatDistanceFromMe.FirstOrDefault();
        //var closestLon = orderedByLonDistanceFromMe.FirstOrDefault();
        //var secondClosestLat = orderedByLatDistanceFromMe.ElementAtOrDefault(1);
        //var secondClosestLon = orderedByLonDistanceFromMe.ElementAtOrDefault(1);

        ////Distance between two closest known points
        //var distanceLat = Math.Abs(closestLat.Location.Latitude - secondClosestLat.Location.Latitude);
        //var distanceX = Math.Abs(closestLat.Point.X - secondClosestLat.Point.X);
        //var distanceLon = Math.Abs(closestLon.Location.Longitude - secondClosestLon.Location.Longitude);
        //var distanceY = Math.Abs(closestLon.Point.Y - secondClosestLon.Point.Y);



        //new order by absolute distances
        var tempList = Places.Where(x => x.Location != null).ToList();
        var currentPlace = new Place {Location = loc };
        tempList.Add(currentPlace);
        var orderedByLat = tempList.OrderByDescending(place => place.Location.Latitude).ToList();
        var orderedByLon = tempList.OrderBy(place => place.Location.Longitude).ToList();

        var myLatIndex = orderedByLat.IndexOf(currentPlace);
        var myLonIndex = orderedByLon.IndexOf(currentPlace);
        var latBeforeMe = orderedByLat.ElementAtOrDefault(myLatIndex - 1);
        var latAfterMe = orderedByLat.ElementAtOrDefault(myLatIndex + 1);
        var lonBeforeMe = orderedByLat.ElementAtOrDefault(myLonIndex - 1);
        var lonAfterMe = orderedByLat.ElementAtOrDefault(myLonIndex + 1);


        var beforeAndAfterdistanceLat = Math.Abs(latBeforeMe.Location.Latitude - latAfterMe.Location.Latitude);
        var beforeAndAfterdistanceX = Math.Abs(latBeforeMe.Point.X - latAfterMe.Point.X);
        var beforeAndAfterdistanceLon = Math.Abs(lonBeforeMe.Location.Longitude - lonAfterMe.Location.Longitude);
        var beforeAndAfterdistanceY = Math.Abs(lonBeforeMe.Point.Y - lonAfterMe.Point.Y);

        var pixelsPerLatDegree = beforeAndAfterdistanceY / beforeAndAfterdistanceLat;
        var pixelsPerLonDegree = beforeAndAfterdistanceX / beforeAndAfterdistanceLon;

        var distanceFromMeToPointBeforeLat = currentPlace.Location.Latitude - latBeforeMe.Location.Latitude;
        var distanceFromMeToPointBeforeLon = currentPlace.Location.Longitude - lonBeforeMe.Location.Longitude;

        var distanceFromMeToPointBeforeX = distanceFromMeToPointBeforeLon * pixelsPerLonDegree;
        var distanceFromMeToPointBeforeY = distanceFromMeToPointBeforeLat * pixelsPerLatDegree;

        var myX = lonBeforeMe.Point.X + distanceFromMeToPointBeforeX;
        var myY = latBeforeMe.Point.Y - distanceFromMeToPointBeforeY;

        currentPlace.Point = new SKPoint((float)myX, (float)myY);

        Location = loc;
        CurrentLocation = currentPlace;

        await jsRuntime.InvokeVoidAsync("AddMarker", loc.Latitude, loc.Longitude);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(firstRender)
            await GetLocation();

    }

    public class Place
    {
        public SKPoint Point { get; set; }
        public string Label { get; set; } = "";
        public GeolocationCoordinates Location { get; set; } 
    }

    public class Line
    {
        public SKPoint Start { get; set; }
        public SKPoint End { get; set; }
        public SKPoint MidPoint => new SKPoint((Start.X + End.X) / 2,(Start.Y + End.Y) / 2);
        public string Label { get; set; } = "";
    }
}